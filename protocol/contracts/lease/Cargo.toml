lints = { workspace = true }

[package]
name = "lease"
version = "0.9.9"
edition.workspace = true
authors.workspace = true
license.workspace = true

[package.metadata.cargo-each]
combinations = [
    { tags = ["build", "$net", "$protocol"], always-on = ["contract", "$net", "$protocol"], include-rest = false, generics = { "$net" = "net", "$protocol" = "protocol" } },
    { tags = ["build", "$net", "$protocol"], always-on = ["$net", "$protocol"], include-rest = false, generics = { "$net" = ["net_dev", "net_test"], "$protocol" = ["osmosis-osmosis-osmo"] } },
    { tags = ["build", "$net", "$protocol"], always-on = ["$net", "$protocol"], include-rest = false, generics = { "$net" = ["net_main"], "$protocol" = ["neutron-astroport-usdc_noble", "osmosis-osmosis-akt", "osmosis-osmosis-all_btc", "osmosis-osmosis-all_sol", "osmosis-osmosis-statom", "osmosis-osmosis-usdc_noble"] } },
    { tags = ["ci", "$net", "$protocol"], feature-groups = ["net", "protocol", "contract-and-skel", "testing"], always-on = ["$net", "$protocol"], include-rest = false, generics = { "$net" = "net", "$protocol" = "protocol" } },
    { tags = ["ci", "$net", "$protocol"], feature-groups = ["contract-and-skel", "testing"], always-on = ["$net", "$protocol"], include-rest = false, generics = { "$net" = ["net_dev", "net_test"], "$protocol" = ["osmosis-osmosis-osmo"] } },
    { tags = ["ci", "$net", "$protocol"], feature-groups = ["contract-and-skel", "testing"], always-on = ["$net", "$protocol"], include-rest = false, generics = { "$net" = ["net_main"], "$protocol" = ["neutron-astroport-usdc_noble", "osmosis-osmosis-akt", "osmosis-osmosis-all_btc", "osmosis-osmosis-all_sol", "osmosis-osmosis-statom", "osmosis-osmosis-usdc_noble"] } },
]
feature-groups = { net = { members = ["net_dev", "net_test", "net_main"], at-least-one = true, mutually-exclusive = true }, protocol = { members = ["neutron-astroport-usdc_axelar", "osmosis-osmosis-usdc_axelar"], at-least-one = true, mutually-exclusive = true }, contract-and-skel = { members = ["contract", "skel"], at-least-one = false, mutually-exclusive = true }, testing = { members = ["testing"], at-least-one = false, mutually-exclusive = false } }

[lib]
crate-type = ["cdylib", "rlib"]

[features]
dex-astroport_main = ["contract", "swap/dex-astroport_main"]
dex-astroport_test = ["contract", "swap/dex-astroport_test"]
dex-osmosis = ["contract", "swap/dex-osmosis"]

contract = [
    "dep:cosmwasm-std",
    "dep:enum_dispatch",
    "skel",
    "sdk/contract",
    "dep:swap",
    "dep:versioning",
]
skel = [
    "dep:access-control",
    "dep:lpp",
    "dep:oracle",
    "dep:oracle-platform",
    "dep:platform",
    "dep:profit",
    "dep:reserve",
    "dep:timealarms",
    "dep:thiserror",
]
testing = [
    "currencies/testing",
    "currency/testing",
    "finance/testing",
    "dep:lpp",
    "lpp/testing",
    "dep:profit",
    "profit/testing",
]

[dependencies]
profit = { workspace = true, optional = true, features = ["stub"] }
reserve = { workspace = true, optional = true, features = ["stub"] }
timealarms = { workspace = true, optional = true, features = ["stub"] }

access-control = { workspace = true, optional = true }
currencies = { workspace = true }
currency = { workspace = true }
dex = { workspace = true, features = ["impl", "migration"] }
finance = { workspace = true }
lpp = { workspace = true, optional = true, features = ["stub"] }
oracle = { workspace = true, optional = true, features = ["stub_alarms", "stub_price"] }
oracle-platform = { workspace = true, optional = true }
platform = { workspace = true, optional = true }
sdk = { workspace = true }
swap = { workspace = true, optional = true }
versioning = { workspace = true, optional = true }

# Required as a dependency by `entry_point` attribute macro
cosmwasm-std = { workspace = true, optional = true }

enum_dispatch = { workspace = true, optional = true }
thiserror = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"] }

[dev-dependencies]
timealarms = { workspace = true, features = ["testing"] }
lpp = { workspace = true, features = ["testing"] }
profit = { workspace = true, features = ["testing"] }
oracle = { workspace = true, features = ["testing"] }
oracle-platform = { workspace = true, features = ["testing"] }
finance = { workspace = true, features = ["testing"] }
currencies = { workspace = true, features = ["testing"] }
currency = { workspace = true, features = ["testing"] }
platform = { workspace = true, features = ["testing"] }
schema = { workspace = true }
